#! /usr/bin/env python

################################################################################
#
# Copyright (c) 2009 The MadGraph Development team and Contributors
#
# This file is a part of the MadGraph 5 project, an application which 
# automatically generates Feynman diagrams and matrix elements for arbitrary
# high-energy processes in the Standard Model and beyond.
#
# It is subject to the MadGraph license which should accompany this 
# distribution.
#
# For more information, please visit: http://madgraph.phys.ucl.ac.be
#
################################################################################

"""This is the main executable, a simple frontend to set up the PYTHONPATH
and call immediately the command line interface scripts"""

import sys

if not sys.version_info[0] == 2 or sys.version_info[1] < 6:
    sys.exit('MadGraph 5 works only with python 2.6 or later (but not python 3.X).\n\
               Please upgrate your version of python.')
import optparse
import logging
import logging.config

import subprocess
import os.path as path


# Get the parent directory (mg root) of the script real path (bin)
# and add it to the current PYTHONPATH

root_path = path.split(path.dirname(path.realpath( __file__ )))[0]
sys.path.append(root_path)


# Write out nice usage message if called with -h or --help
usage = "usage: %prog [options] [FILE] "
parser = optparse.OptionParser(usage=usage)
parser.add_option("-l", "--logging", default='INFO',
                  help="logging level (DEBUG|INFO|WARNING|ERROR|CRITICAL) [%default]")
parser.add_option("-f", "--file", default='',
					help="Use script file FILE")
parser.add_option("-d", "--mgme_dir", default='', dest = 'mgme_dir',
                  help="Use MG_ME directory MGME_DIR")
parser.add_option("","--web", action="store_true", default=False, dest='web', \
                 help='force to be in secure mode')
parser.add_option("","--debug", action="store_true", default=False, dest='debug', \
                 help='force to launch debug mode')
(options, args) = parser.parse_args()
if len(args) == 0:
    args = ''

# Check if optimize mode is (and should be) activated
if __debug__ and not options.debug:
    subprocess.call([sys.executable] + ['-O'] + sys.argv)
    sys.exit()


# Set logging level according to the logging level given by options
#logging.basicConfig(level=vars(logging)[options.logging])
try:
    logging.config.fileConfig(path.join(root_path, 'madgraph', 'interface', '.mg5_logging.conf'))
    logging.root.setLevel(eval('logging.' + options.logging))
    logging.getLogger('madgraph').setLevel(eval('logging.' + options.logging))
except:
    pass
import madgraph.interface.cmd_interface as cmd_interface

# Call the cmd interface main loop
if options.file or args:
    # They are an input file 
    if args:
        input_file = args[0]
    else:
        input_file = options.file
    if options.web:
        cmd_line = cmd_interface.MadGraphCmdWeb()
        cmd_line.run_cmd('import command ' + input_file)
        sys.exit()
    else:
        cmd_line = cmd_interface.MadGraphCmdShell(mgme_dir = options.mgme_dir)
        cmd_line.run_cmd('import command ' + input_file)
        sys.exit()
else:
    # Interactive mode
    if options.web:
        cmd_interface.MadGraphCmdWeb().cmdloop()
    else:
        cmd_interface.MadGraphCmdShell(mgme_dir = options.mgme_dir).cmdloop()

